{"version":3,"file":"load-external-file.service.js","sourceRoot":"","sources":["../../src/load-external-file.service.ts"],"names":[],"mappings":"AAAA,uCAAuC;;;;;;;;;;AAEvC,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AAMzC;IAEE;IAAe,CAAC;IAET,gCAAI,GAAX;QAAA,iBAGC;QAHW,eAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,0BAAkB;;QAC5B,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,UAAC,UAA+B,EAAE,IAAY,IAAK,OAAI,UAAU,SAAE,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAnC,CAAoC,EAAE,EAAE,CAAC,CAAC;QACzH,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAEO,oCAAQ,GAAhB,UAAiB,IAAY;QAE3B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAM,CAAC;YACX,EAAE,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM;gBACN,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBACnC,CAAC,CAAC,GAAG,GAAG,YAAY,CAAC;gBACrB,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAE,uBAAuB;YAC9D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,aAAa;gBACb,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBACrC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;gBACb,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;YACjB,CAAC;YACD,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAExD,CAAC,CAAC,MAAM,GAAG;gBACT,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC;YACF,CAAC,CAAC,OAAO,GAAG,UAAC,GAAQ,IAAK,OAAA,MAAM,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,EAArC,CAAqC,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAC;IA/BU,iBAAiB;QAD7B,UAAU,EAAE;;OACA,iBAAiB,CAgC7B;IAAD,wBAAC;CAAA,AAhCD,IAgCC;SAhCY,iBAAiB","sourcesContent":["/// <reference path=\"read-file.d.ts\" />\n\nimport {Injectable} from \"@angular/core\";\nimport read from \"read-file\"; \n\ndeclare let document: any;\n\n@Injectable()\nexport class LoadExternalFiles {\n\n  constructor() {}\n\n  public load(...paths: string[]) {\n    let promises = paths.reduce((promiseArr: Array<Promise<any>>, path: string) => [...promiseArr, this.loadFile(path)], []);\n    return Promise.all(promises);\n  }\n\n  private loadFile(path: string) {\n\n    return new Promise((resolve, reject) => {\n      let e: any;\n      if (/(^css!|\\.css$)/.test(path)) {\n        // css\n        e = document.createElement('link');\n        e.rel = 'stylesheet';\n        e.href = path.replace(/^css!/, '');  // remove \"css!\" prefix\n      } else {\n        // javascript\n        e = document.createElement('script');\n        e.src = path;\n        e.async = true;\n      }\n      document.getElementsByTagName('head')[0].appendChild(e);\n\n      e.onload = () => {\n        resolve();\n      };\n      e.onerror = (err: any) => reject(new Error(\"Files not found.\"));\n    });\n  }\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}